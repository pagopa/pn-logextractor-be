openapi: 3.0.3
info:
  version: 1.0.0
  title: openapi LogExtractor project
  description: API description for log extractor project
  license:
    name: Licenza di PN
    url: 'https://da-definire/'
servers:
  - url: https://api.backoffice.pn.pagopa.it
    description: Production environment
  - url: https://api.backoffice.uat.pn.pagopa.it
    description: Test environment
  - url: https://api.backoffice.dev.pn.pagopa.it
    description: Development environment
tags:
  - name: persons
    description: Operations about a person
  - name: logs
    description: Operations about logs and extractions
  - name: healthCheck
    description: Operations about application status

paths:
  '/persons/v1/person-id':
    post:
      tags:
        - persons
      operationId: getPersonalPersonId
      description: Get the unique identifier of a person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPersonIdRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBasicDataResponseDto'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  '/persons/v1/tax-id':
    post:
      tags:
        - persons
      operationId: getPersonalTaxId
      description: Get the tax id of a person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonTaxIdRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBasicDataResponseDto'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  '/logs/v1/notifications/info':
    post:
      tags:
        - logs
      operationId: getNotificationInfoLogs
      description: Download the logs archive containing the full info of a notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationInfoRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseDTO'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  '/logs/v1/notifications/monthly':
    post:
      tags:
        - logs
      operationId: getNotificationsInMonth
      description: Download the logs archive containing the notifications sent in a specific month
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonthlyNotificationsRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseDTO'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  '/logs/v1/persons':
    post:
      tags:
        - logs
      operationId: getPersonActivityLogs
      description: Download the logs archive related to a person's own activities or on a notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonLogsRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseDTO'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  '/logs/v1/processes':
    post:
      tags:
        - logs
      operationId: getProcessLogs
      description: Download the logs archive related to a process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraceIdLogsRequestDto'
      responses:
        '200':
          description: The operation has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseDTO'
        '400':
          description: Errors during the request validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Errors during the request elaboration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  "/health-check/status":
    get:
      tags:
        - healthCheck
      operationId: getHealthStatus
      description: Get the application status
      responses:
        '204':
          description: The application is running
components:
  schemas:
    PersonPersonIdRequestDto:
      type: object
      required:
        - ticketNumber
        - taxId
        - recipientType
      properties:
        ticketNumber:
          type: string
          nullable: false
        taxId:
          type: string
          minLength: 16
          maxLength: 16
          pattern: '^([A-Za-z]{6}[0-9lmnpqrstuvLMNPQRSTUV]{2}[abcdehlmprstABCDEHLMPRST]{1}[0-9lmnpqrstuvLMNPQRSTUV]{2}[A-Za-z]{1}[0-9lmnpqrstuvLMNPQRSTUV]{3}[A-Za-z]{1})|([0-9]{11})$'
          nullable: false
        recipientType:
          $ref: '#/components/schemas/RecipientTypes'
    PersonTaxIdRequestDto:
      type: object
      required:
        - personId
      properties:
        personId:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '[A-Za-z0-9~_-]*'
    NotificationInfoRequestDto:
      type: object
      required:
        - ticketNumber
        - iun
      properties:
        ticketNumber:
          type: string
          nullable: false
        iun:
          type: string
          nullable: false
          minLength: 25
          maxLength: 25
    MonthlyNotificationsRequestDto:
      type: object
      required:
        - ticketNumber
        - publicAuthorityName
        - referenceMonth
        - endMonth
      properties:
        ticketNumber:
          type: string
          nullable: false
        publicAuthorityName:
          type: string
          nullable: false
        referenceMonth:
          type: string
          nullable: false
          pattern: '([0-9]{4})-(?:[0-9]{2})-01T00:00:00.000Z'
        endMonth:
          type: string
          nullable: false
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T00:00:00.000Z'
    PersonLogsRequestDto:
      type: object
      required:
        - ticketNumber
      properties:
        ticketNumber:
          type: string
          nullable: false
        deanonimization:
          type: boolean
          nullable: false
        taxId:
          type: string
          pattern: '^([A-Za-z]{6}[0-9lmnpqrstuvLMNPQRSTUV]{2}[abcdehlmprstABCDEHLMPRST]{1}[0-9lmnpqrstuvLMNPQRSTUV]{2}[A-Za-z]{1}[0-9lmnpqrstuvLMNPQRSTUV]{3}[A-Za-z]{1})|([0-9]{11})$'
        personId:
          type: string
        iun:
          type: string
          minLength: 25
          maxLength: 25
          pattern: '([A-Za-z]{4})-([A-Za-z]{4})-([A-Za-z]{4})-([0-9]{6})-([A-Za-z]{1})-([0-9]{1})'
        dateFrom:
          type: string
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
        dateTo:
          type: string
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
        recipientType:
          $ref: '#/components/schemas/RecipientTypes'
    TraceIdLogsRequestDto:
      type: object
      required:
        - traceId
        - dateFrom
        - dateTo
      properties:
        traceId:
          type: string
          nullable: false
        dateFrom:
          type: string
          nullable: false
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
        dateTo:
          type: string
          nullable: false
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
    GetBasicDataResponseDto:
      type: object
      required:
        - data
        - message
      properties:
        data:
          type: string
        message:
          type: string
    BaseResponseDTO:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ApiError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    RecipientTypes:
      type: string
      enum: [ "PF", "PG"]