AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudFormation definition of Log Extractor public API subsystem

Parameters:

  ProjectName:
    Type: String
    Description: Name of the project

  NetworkLoadBalancerLink:
    Type: String
    Description: Link inside the VPC

  ApplicationLoadBalancerDomain:
    Type: String
    Description: Application load balancer that dispatch request to microserveces

Resources:

  PublicRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ProjectName}-public-api
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  # /{proxy+} resource
  PublicApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PublicRestApi
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: '{proxy+}'

  # /{proxy+} methods
  PublicApiProxyAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Proxy to ECS microservices
      RestApiId: !Ref PublicRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.x-pagopa-pn-uid: false
        method.request.header.x-pagopa-pn-cx-id: false
        method.request.header.x-pagopa-pn-cx-type: false
        method.request.header.x-pagopa-pn-cx-groups: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub http://${ApplicationLoadBalancerDomain}:8080/{proxy}
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000

  GatewayResponse4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref PublicRestApi

  GatewayResponse5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref PublicRestApi

  PublicRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PublicApiProxyAnyMethod
    Properties:
      RestApiId: !Ref PublicRestApi

  PublicRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref PublicRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref PublicRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt PublicApiLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  PublicApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

