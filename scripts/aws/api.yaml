AWSTemplateFormatVersion: "2010-09-09"

Description: |
  CloudFormation definition of Log Extractor public API subsystem


Parameters:
  NetworkLoadBalancerDomain:
    Type: String
    Description: Network load balancer that dispatch request to microserveces

  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool to use in the authorizer

  LogRetentionInDays:
    Type: Number
    Description: Number of days to preserve the API logs

  NetworkLoadBalancerLink:
    Type: String
    Description: Link inside the VPC

  ProjectName:
    Type: String
    Description: Name of the project

Resources:
  CloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Path: /

  Account:
    Type: "AWS::ApiGateway::Account"
    DependsOn:
      - PublicRestApi
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  PublicApiLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: !Ref LogRetentionInDays

  PublicRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      FailOnWarnings: true
      Name: !Sub ${ProjectName}-public-api

  GatewayResponse4XX:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref PublicRestApi

  GatewayResponse5XX:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref PublicRestApi

  PublicRestApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - PublicApiHealthCheckStatusMethod
      - PublicApiLogsV1NotificationsInfoMethod
      - PublicApiLogsV1NotificationsMonthlyMethod
      - PublicApiLogsV1PersonsMethod
      - PublicApiLogsV1ProcessesMethod
      - PublicApiPersonsV1PersonIdMethod
      - PublicApiPersonsV1TaxIdMethod
      - PublicApiDowntimeStatusMethod
      - PublicApiDowntimeEventsMethod
    Properties:
      RestApiId: !Ref PublicRestApi

  CognitoAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      RestApiId: !Ref PublicRestApi
      Type: COGNITO_USER_POOLS

  PublicRestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt PublicApiLogGroup.Arn
        Format: "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"httpMethod\":\"$context.httpMethod\",\"path\":\"$context.path\",\"routeKey\":\"$context.routeKey\",\"status\":$context.status,\"responseLatency\":$context.responseLatency}"
      DeploymentId: !Ref PublicRestApiDeployment
      MethodSettings:
        - DataTraceEnabled: "false"
          HttpMethod: "*"
          MetricsEnabled: "true"
          ResourcePath: /*
      RestApiId: !Ref PublicRestApi
      StageName: logextractor
      TracingEnabled: true

  UsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        - ApiId: !Ref PublicRestApi
          Stage: !Ref PublicRestApiStage
      Description: Default usage plan
      UsagePlanName: Default

  PublicApiBasePersonsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: "persons"
      RestApiId: !Ref PublicRestApi

  PublicApiPersonsV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiBasePersonsResource
      PathPart: "v1"
      RestApiId: !Ref PublicRestApi

  PublicApiPersonsV1PersonIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiPersonsV1Resource
      PathPart: "person-id"
      RestApiId: !Ref PublicRestApi

  PublicApiPersonsV1TaxIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiPersonsV1Resource
      PathPart: "tax-id"
      RestApiId: !Ref PublicRestApi

  PublicApiBaseLogsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: "logs"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiBaseLogsResource
      PathPart: "v1"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1NotificationsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiLogsV1Resource
      PathPart: "notifications"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1NotificationsInfoResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiLogsV1NotificationsResource
      PathPart: "info"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1NotificationsMonthlyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiLogsV1NotificationsResource
      PathPart: "monthly"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1PersonsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiLogsV1Resource
      PathPart: "persons"
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1ProcessesResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiLogsV1Resource
      PathPart: "processes"
      RestApiId: !Ref PublicRestApi

  PublicApiHealthCheckStatusResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: "status"
      RestApiId: !Ref PublicRestApi

  PublicApiBaseDowntimeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: "downtime"
      RestApiId: !Ref PublicRestApi

  PublicApiDowntimeV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiBaseDowntimeResource
      PathPart: "v1"
      RestApiId: !Ref PublicRestApi
      
  PublicApiDowntimeV1StatusResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiDowntimeV1Resource
      PathPart: "status"
      RestApiId: !Ref PublicRestApi
      
  PublicApiDowntimeV1EventsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PublicApiDowntimeV1Resource
      PathPart: "events"
      RestApiId: !Ref PublicRestApi
      
  PublicApiHealthCheckStatusMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/status"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiHealthCheckStatusResource
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1NotificationsInfoMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/logs/v1/notifications/info"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiLogsV1NotificationsInfoResource
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1NotificationsMonthlyMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/logs/v1/notifications/monthly"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiLogsV1NotificationsMonthlyResource
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1PersonsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/logs/v1/persons"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiLogsV1PersonsResource
      RestApiId: !Ref PublicRestApi

  PublicApiLogsV1ProcessesMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/logs/v1/processes"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiLogsV1ProcessesResource
      RestApiId: !Ref PublicRestApi

  PublicApiPersonsV1PersonIdMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/persons/v1/person-id"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiPersonsV1PersonIdResource
      RestApiId: !Ref PublicRestApi

  PublicApiPersonsV1TaxIdMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/persons/v1/tax-id"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiPersonsV1TaxIdResource
      RestApiId: !Ref PublicRestApi

  PublicApiDowntimeStatusMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: GET
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/downtime/v1/status"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiDowntimeV1StatusResource
      RestApiId: !Ref PublicRestApi

  PublicApiDowntimeEventsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        Type: HTTP_PROXY
        ConnectionId: !Ref NetworkLoadBalancerLink
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        TimeoutInMillis: 29000
        Uri: !Sub "http://${NetworkLoadBalancerDomain}:8080/downtime/v1/events"
      OperationName: Proxy to ECS microservices
      RequestParameters:
        method.request.path.proxy: true
      ResourceId: !Ref PublicApiDowntimeV1EventsResource
      RestApiId: !Ref PublicRestApi
Outputs:
  RestApiId:
    Description: Api id
    Value: !Ref PublicRestApi

  RestApiStageName:
    Description: Api stage name
    Value: !Ref PublicRestApiStage
