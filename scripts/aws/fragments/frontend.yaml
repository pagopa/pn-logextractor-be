AWSTemplateFormatVersion: "2010-09-09"

Description: |
  CloudFormation definition of Log Extractor Frontend subsystem

Parameters:
  LogBucketDomainName:
    Type: String
    Description: Bucket (domain name) to store CloudFront logs

  ProjectName:
    Type: String
    Description: Name of the project

  HostedZoneId:
    Type: String
    Description: Hosted Zone ID

  WebDomain:
    Type: String
    Description: Web domain name

  WebDomainReferenceToSite:
    Description: true if the website must be reachable using the WebDomain
    Type: String
    Default: 'true'

  AlternateWebDomain:
    Description: "Alternate Domain name for the webapp"
    Type: String
    Default: ''

  AlternateWebDomainReferenceToSite:
    Description: true if the website must be reachable using the AlternateWebDomain
    Type: String
    Default: 'true' 

  AlternateHostedZoneId:
    Description: Hosted Zone Id in which you want to add alternate DNS
    Type: String
    Default: ''

  WebCertificateArn:
    Description: "ACM Web Certificate ARN"
    Type: String

  ApiUrl:
    Description: "Helpdesk API Base URL"
    Type: String
  
  CoreApiUrl:
    Description: "Core API Url"
    Type: String

Conditions:
  # If domain is used in certificate, add this domain to CloudFront
  CreateDNSname: !Equals
        - !Ref WebDomainReferenceToSite
        - 'true'
  
  # If alternate domain is provided and is used in certificate, add this domain to CloudFront
  CreateAlternateDNSname: 
    Fn::And:
      - Fn::Not: 
        - Fn::Equals:
          - !Ref AlternateWebDomain
          - ""
      - !Equals
        - !Ref AlternateWebDomainReferenceToSite
        - 'true'
  
  # Condition combination to handle CDN alias array without NoValue
  BothDNSNames: !And [ !Condition CreateDNSname, !Condition CreateAlternateDNSname ]
  OnlyPrimaryDNSName: !And [ !Condition CreateDNSname, !Not [ !Condition CreateAlternateDNSname ] ]
  OnlyAlternateDNSName: !And [ !Not [ !Condition CreateDNSname ], !Condition CreateAlternateDNSname ]
  
  CreatePrimaryAliasRecord: !Not 
    - !Equals
      - !Ref HostedZoneId
      - ""
  
  CreateAlternateAliasRecord: !Not 
    - !Equals
      - !Ref AlternateHostedZoneId
      - ""
Resources:
  Hosting:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Sub ${ProjectName}-hosting
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  OAI:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${ProjectName}

  HostingPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Hosting
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI}"
            Action:
              - "s3:GetObject"
            Resource:
              - "Fn::Sub": ${Hosting.Arn}/*

  ApiOriginRequest:
    Type: "AWS::CloudFront::OriginRequestPolicy"
    Properties:
      OriginRequestPolicyConfig:
        Name: AllowOnlyAuthHeader
        Comment: Allows only Auth header
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - Auth
        QueryStringsConfig:
          QueryStringBehavior: none

  ApiCache:
    Type: "AWS::CloudFront::CachePolicy"
    Properties:
      CachePolicyConfig:
        Comment: Disable caching and forward Authorization header
        DefaultTTL: 0
        MaxTTL: 1
        MinTTL: 0
        Name: DisabledAndForwardAuthorization
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Authorization
          QueryStringsConfig:
            QueryStringBehavior: none

  # - WebApp default five minutes caching policy
  WebsiteCDNCachingPolicyFiveMinutes:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub '${ProjectName}-WebsiteCDNCachingPolicyFiveMinutes'
        Comment: 'Keep cache for five minutes.'
        DefaultTTL: 300 
        MaxTTL: 300
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none  


  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            TargetOriginId: s3_hosting
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref WebsiteCDNCachingPolicyFiveMinutes
            ResponseHeadersPolicyId: !Ref DefaultHeaderPolicy
            PathPattern: index.html
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            TargetOriginId: s3_hosting
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: b2884449-e4de-46a7-ac36-70bc7f1ddd6d ## CachingOptimizedForUncompressedObjects - Default TTL: 86,400 seconds (24 hours) - https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policies-list
            ResponseHeadersPolicyId: !Ref DefaultHeaderPolicy
            PathPattern: static/*
        Aliases:
          !If
            - BothDNSNames
            - - !Ref WebDomain
              - !Ref AlternateWebDomain
            - !If
                - OnlyPrimaryDNSName
                - - !Ref WebDomain
                - !If
                    - OnlyAlternateDNSName
                    - - !Ref AlternateWebDomain
                    - !Ref AWS::NoValue
        Comment: !Sub ${ProjectName}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized
          TargetOriginId: s3_hosting
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Logging:
          Bucket: !Ref LogBucketDomainName
        Origins:
          - DomainName: !GetAtt Hosting.RegionalDomainName
            Id: s3_hosting
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAI}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  DefaultHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties: 
      ResponseHeadersPolicyConfig: 
        Name: !Sub '${ProjectName}-headerPolicy'
        SecurityHeadersConfig: 
          # add_header Content-Security-Policy
          ContentSecurityPolicy: 
            ContentSecurityPolicy: 
              Fn::Join:
                - " "
                - - "default-src 'self';"
                  - "object-src 'none';" 
                  - !Sub " connect-src 'self' \
                           https://cognito-idp.eu-central-1.amazonaws.com \
                           ${CoreApiUrl} \
                           ${ApiUrl}; \
                           style-src 'self' 'unsafe-inline'; \
                           worker-src 'none'; \
                           font-src 'self'; \
                           frame-ancestors 'self' ; \
                           img-src 'self' https://assets.cdn.io.italia.it/ data:"
            Override: true
          # add_header X-Content-Type-Options "nosniff";
          ContentTypeOptions: 
            #ContentTypeOptions: "nosniff"
            Override: true
          # add_header X-Frame-Options "SAMEORIGIN";
          FrameOptions: 
            FrameOption: "SAMEORIGIN"
            Override: true
          # add_header Referrer-Policy "no-referrer";
          ReferrerPolicy: 
            ReferrerPolicy: "no-referrer"
            Override: true
          # add_header Strict-Transport-Security "max-age=31536000";
          StrictTransportSecurity: 
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: false
            Preload: false
            Override: true

  Route53RecordSetGroup:
    Condition: CreatePrimaryAliasRecord
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref WebDomain
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2

  #Alternate domain Route53 record
  AlternateRoute53RecordSetGroup:
    Condition: CreateAlternateAliasRecord
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref AlternateWebDomain
      Type: A
      HostedZoneId: !Ref AlternateHostedZoneId
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2

  ## 
  ## Rewrite rule based on example provided by aws at https://github.com/aws-samples/amazon-cloudfront-functions/blob/main/url-rewrite-single-page-apps/index.js
  RewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var uri = request.uri;
            
            if( uri != '/' && uri != '' ) { // Do not override default root object
              
              // Check whether the URI is missing a file name.
              if (uri.endsWith('/')) {
                request.uri += 'index.html';
              } 
              // Check whether the URI is missing a file extension.
              else if (!uri.includes('.')) {
                request.uri += '/index.html';
              }
            }
            
            return request;
        }
      FunctionConfig:
        Comment: 'Rewriting the request between a CloudFront Distribution and an origin'
        Runtime: cloudfront-js-1.0
      Name: !Sub "${ProjectName}-RewriteDefaultIndexRequest"

Outputs:
  DistributionId:
    Description: Cloudfront distribution ID
    Value: !Ref Distribution

  DomainName:
    Description: Cloudfront distribution domain name
    Value: !GetAtt Distribution.DomainName