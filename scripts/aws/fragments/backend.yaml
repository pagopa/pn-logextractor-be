AWSTemplateFormatVersion: "2010-09-09"

Description: |
  CloudFormation definition of Log Extractor Backend subsystem


Parameters:
  ProjectName:
    Type: String
    Description: Name of the project

  SubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Private subnets to deploy resources into

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VPC id of the subnets

Resources:
  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      EncryptionConfiguration:
        EncryptionType: KMS
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE
      RepositoryName: !Sub ${ProjectName}

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub ${ProjectName}-ecs-cluster

  LoadBalancerLogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${ProjectName}-loadbalancer-logs

  NetworkLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      Subnets: !Ref SubnetIds
      Type: network

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow traffic to microservices
      GroupName: !Sub ${ProjectName}-alb
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0" # !Ref VpcCidrBlock
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId: !Ref VpcId

  LoadBalancerLogBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref LoadBalancerLogBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: logdelivery.elb.amazonaws.com
            Action: "s3:GetBucketAcl"
            Resource: !GetAtt LoadBalancerLogBucket.Arn
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${ProjectName}-loadbalancer-logs/*/AWSLogs/${AWS::AccountId}/*"

  NetworkLoadBalancerLink:
    Type: "AWS::ApiGateway::VpcLink"
    Properties:
      Description: API-GW link to Network load balancer
      Name: !Sub ${ProjectName}-nlb-link
      TargetArns:
        - !Ref NetworkLoadBalancer

  VpcEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      SubnetIds: !Ref SubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref SubnetIds
      Type: application

  ApplicationLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: application/json
            MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP

  ApplicationLoadBalancerHealth:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 204
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/ping"
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

  NetworkToApplicationLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn:
      - ApplicationLoadBalancerListener
    Properties:
      HealthCheckPath: "/ping"
      Port: 8080
      Protocol: TCP
      TargetType: alb
      Targets:
        - Id: !Ref ApplicationLoadBalancer
      VpcId: !Ref VpcId

  NetworkLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          Order: 1
          TargetGroupArn: !Ref NetworkToApplicationLoadBalancerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 8080
      Protocol: TCP

Outputs:
  AlbArn:
    Description: ARN of the application load balancer
    Value: !Ref ApplicationLoadBalancer

  AlbDomain:
    Description: FQDN of the application load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  NlbArn:
    Description: ARN of the Network load balancer
    Value: !Ref NetworkLoadBalancer

  NlbDomain:
    Description: FQDN of the network load balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName

  NlbLink:
    Description: Private link to the NLB in front of ECS
    Value: !Ref NetworkLoadBalancerLink
